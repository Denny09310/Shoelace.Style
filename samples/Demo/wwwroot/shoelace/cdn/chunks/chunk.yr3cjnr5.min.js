/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@shoelace-style/shoelace@2.17.1/cdn/chunks/chunk.YR3CJNR5.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{input_styles_default}from"./chunk.I4BWCXWK.js";import{l}from"./chunk.MB643KRE.js";import{defaultValue}from"./chunk.RQ7JZ4R7.js";import{form_control_styles_default}from"./chunk.2VV6AF6A.js";import{FormControlController}from"./chunk.37HAGFEA.js";import{o}from"./chunk.2URMUHDY.js";import{HasSlotController}from"./chunk.NYIIDP5N.js";import{LocalizeController}from"./chunk.NH3SRVOC.js";import{e}from"./chunk.UZVKBFXH.js";import{SlIcon}from"./chunk.Y7EP3V6G.js";import{watch}from"./chunk.SJGTYGCD.js";import{component_styles_default}from"./chunk.K23QWHWK.js";import{ShoelaceElement,e as e2,n,r}from"./chunk.UQRBALDC.js";import{x}from"./chunk.CXZZ2LVK.js";import{__decorateClass}from"./chunk.625AWUY7.js";var SlInput=class extends ShoelaceElement{constructor(){super(...arguments),this.formControlController=new FormControlController(this,{assumeInteractionOn:["sl-blur","sl-input"]}),this.hasSlotController=new HasSlotController(this,"help-text","label"),this.localize=new LocalizeController(this),this.hasFocus=!1,this.title="",this.__numberInput=Object.assign(document.createElement("input"),{type:"number"}),this.__dateInput=Object.assign(document.createElement("input"),{type:"date"}),this.type="text",this.name="",this.value="",this.defaultValue="",this.size="medium",this.filled=!1,this.pill=!1,this.label="",this.helpText="",this.clearable=!1,this.disabled=!1,this.placeholder="",this.readonly=!1,this.passwordToggle=!1,this.passwordVisible=!1,this.noSpinButtons=!1,this.form="",this.required=!1,this.spellcheck=!0}get valueAsDate(){var t;return this.__dateInput.type=this.type,this.__dateInput.value=this.value,(null==(t=this.input)?void 0:t.valueAsDate)||this.__dateInput.valueAsDate}set valueAsDate(t){this.__dateInput.type=this.type,this.__dateInput.valueAsDate=t,this.value=this.__dateInput.value}get valueAsNumber(){var t;return this.__numberInput.value=this.value,(null==(t=this.input)?void 0:t.valueAsNumber)||this.__numberInput.valueAsNumber}set valueAsNumber(t){this.__numberInput.valueAsNumber=t,this.value=this.__numberInput.value}get validity(){return this.input.validity}get validationMessage(){return this.input.validationMessage}firstUpdated(){this.formControlController.updateValidity()}handleBlur(){this.hasFocus=!1,this.emit("sl-blur")}handleChange(){this.value=this.input.value,this.emit("sl-change")}handleClearClick(t){t.preventDefault(),""!==this.value&&(this.value="",this.emit("sl-clear"),this.emit("sl-input"),this.emit("sl-change")),this.input.focus()}handleFocus(){this.hasFocus=!0,this.emit("sl-focus")}handleInput(){this.value=this.input.value,this.formControlController.updateValidity(),this.emit("sl-input")}handleInvalid(t){this.formControlController.setValidity(!1),this.formControlController.emitInvalidEvent(t)}handleKeyDown(t){const e=t.metaKey||t.ctrlKey||t.shiftKey||t.altKey;"Enter"!==t.key||e||setTimeout((()=>{t.defaultPrevented||t.isComposing||this.formControlController.submit()}))}handlePasswordToggle(){this.passwordVisible=!this.passwordVisible}handleDisabledChange(){this.formControlController.setValidity(this.disabled)}handleStepChange(){this.input.step=String(this.step),this.formControlController.updateValidity()}async handleValueChange(){await this.updateComplete,this.formControlController.updateValidity()}focus(t){this.input.focus(t)}blur(){this.input.blur()}select(){this.input.select()}setSelectionRange(t,e,l="none"){this.input.setSelectionRange(t,e,l)}setRangeText(t,e,l,s="preserve"){const o=null!=e?e:this.input.selectionStart,i=null!=l?l:this.input.selectionEnd;this.input.setRangeText(t,o,i,s),this.value!==this.input.value&&(this.value=this.input.value)}showPicker(){"showPicker"in HTMLInputElement.prototype&&this.input.showPicker()}stepUp(){this.input.stepUp(),this.value!==this.input.value&&(this.value=this.input.value)}stepDown(){this.input.stepDown(),this.value!==this.input.value&&(this.value=this.input.value)}checkValidity(){return this.input.checkValidity()}getForm(){return this.formControlController.getForm()}reportValidity(){return this.input.reportValidity()}setCustomValidity(t){this.input.setCustomValidity(t),this.formControlController.updateValidity()}render(){const t=this.hasSlotController.test("label"),s=this.hasSlotController.test("help-text"),i=!!this.label||!!t,a=!!this.helpText||!!s,n=this.clearable&&!this.disabled&&!this.readonly&&("number"==typeof this.value||this.value.length>0);return x`
      <div
        part="form-control"
        class=${e({"form-control":!0,"form-control--small":"small"===this.size,"form-control--medium":"medium"===this.size,"form-control--large":"large"===this.size,"form-control--has-label":i,"form-control--has-help-text":a})}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${i?"false":"true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e({input:!0,"input--small":"small"===this.size,"input--medium":"medium"===this.size,"input--large":"large"===this.size,"input--pill":this.pill,"input--standard":!this.filled,"input--filled":this.filled,"input--disabled":this.disabled,"input--focused":this.hasFocus,"input--empty":!this.value,"input--no-spin-buttons":this.noSpinButtons})}
          >
            <span part="prefix" class="input__prefix">
              <slot name="prefix"></slot>
            </span>

            <input
              part="input"
              id="input"
              class="input__control"
              type=${"password"===this.type&&this.passwordVisible?"text":this.type}
              title=${this.title}
              name=${o(this.name)}
              ?disabled=${this.disabled}
              ?readonly=${this.readonly}
              ?required=${this.required}
              placeholder=${o(this.placeholder)}
              minlength=${o(this.minlength)}
              maxlength=${o(this.maxlength)}
              min=${o(this.min)}
              max=${o(this.max)}
              step=${o(this.step)}
              .value=${l(this.value)}
              autocapitalize=${o(this.autocapitalize)}
              autocomplete=${o(this.autocomplete)}
              autocorrect=${o(this.autocorrect)}
              ?autofocus=${this.autofocus}
              spellcheck=${this.spellcheck}
              pattern=${o(this.pattern)}
              enterkeyhint=${o(this.enterkeyhint)}
              inputmode=${o(this.inputmode)}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @keydown=${this.handleKeyDown}
              @focus=${this.handleFocus}
              @blur=${this.handleBlur}
            />

            ${n?x`
                  <button
                    part="clear-button"
                    class="input__clear"
                    type="button"
                    aria-label=${this.localize.term("clearEntry")}
                    @click=${this.handleClearClick}
                    tabindex="-1"
                  >
                    <slot name="clear-icon">
                      <sl-icon name="x-circle-fill" library="system"></sl-icon>
                    </slot>
                  </button>
                `:""}
            ${this.passwordToggle&&!this.disabled?x`
                  <button
                    part="password-toggle-button"
                    class="input__password-toggle"
                    type="button"
                    aria-label=${this.localize.term(this.passwordVisible?"hidePassword":"showPassword")}
                    @click=${this.handlePasswordToggle}
                    tabindex="-1"
                  >
                    ${this.passwordVisible?x`
                          <slot name="show-password-icon">
                            <sl-icon name="eye-slash" library="system"></sl-icon>
                          </slot>
                        `:x`
                          <slot name="hide-password-icon">
                            <sl-icon name="eye" library="system"></sl-icon>
                          </slot>
                        `}
                  </button>
                `:""}

            <span part="suffix" class="input__suffix">
              <slot name="suffix"></slot>
            </span>
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${a?"false":"true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `}};SlInput.styles=[component_styles_default,form_control_styles_default,input_styles_default],SlInput.dependencies={"sl-icon":SlIcon},__decorateClass([e2(".input__control")],SlInput.prototype,"input",2),__decorateClass([r()],SlInput.prototype,"hasFocus",2),__decorateClass([n()],SlInput.prototype,"title",2),__decorateClass([n({reflect:!0})],SlInput.prototype,"type",2),__decorateClass([n()],SlInput.prototype,"name",2),__decorateClass([n()],SlInput.prototype,"value",2),__decorateClass([defaultValue()],SlInput.prototype,"defaultValue",2),__decorateClass([n({reflect:!0})],SlInput.prototype,"size",2),__decorateClass([n({type:Boolean,reflect:!0})],SlInput.prototype,"filled",2),__decorateClass([n({type:Boolean,reflect:!0})],SlInput.prototype,"pill",2),__decorateClass([n()],SlInput.prototype,"label",2),__decorateClass([n({attribute:"help-text"})],SlInput.prototype,"helpText",2),__decorateClass([n({type:Boolean})],SlInput.prototype,"clearable",2),__decorateClass([n({type:Boolean,reflect:!0})],SlInput.prototype,"disabled",2),__decorateClass([n()],SlInput.prototype,"placeholder",2),__decorateClass([n({type:Boolean,reflect:!0})],SlInput.prototype,"readonly",2),__decorateClass([n({attribute:"password-toggle",type:Boolean})],SlInput.prototype,"passwordToggle",2),__decorateClass([n({attribute:"password-visible",type:Boolean})],SlInput.prototype,"passwordVisible",2),__decorateClass([n({attribute:"no-spin-buttons",type:Boolean})],SlInput.prototype,"noSpinButtons",2),__decorateClass([n({reflect:!0})],SlInput.prototype,"form",2),__decorateClass([n({type:Boolean,reflect:!0})],SlInput.prototype,"required",2),__decorateClass([n()],SlInput.prototype,"pattern",2),__decorateClass([n({type:Number})],SlInput.prototype,"minlength",2),__decorateClass([n({type:Number})],SlInput.prototype,"maxlength",2),__decorateClass([n()],SlInput.prototype,"min",2),__decorateClass([n()],SlInput.prototype,"max",2),__decorateClass([n()],SlInput.prototype,"step",2),__decorateClass([n()],SlInput.prototype,"autocapitalize",2),__decorateClass([n()],SlInput.prototype,"autocorrect",2),__decorateClass([n()],SlInput.prototype,"autocomplete",2),__decorateClass([n({type:Boolean})],SlInput.prototype,"autofocus",2),__decorateClass([n()],SlInput.prototype,"enterkeyhint",2),__decorateClass([n({type:Boolean,converter:{fromAttribute:t=>!(!t||"false"===t),toAttribute:t=>t?"true":"false"}})],SlInput.prototype,"spellcheck",2),__decorateClass([n()],SlInput.prototype,"inputmode",2),__decorateClass([watch("disabled",{waitUntilFirstUpdate:!0})],SlInput.prototype,"handleDisabledChange",1),__decorateClass([watch("step",{waitUntilFirstUpdate:!0})],SlInput.prototype,"handleStepChange",1),__decorateClass([watch("value",{waitUntilFirstUpdate:!0})],SlInput.prototype,"handleValueChange",1);export{SlInput};
//# sourceMappingURL=/sm/039a0c9b97b07cfd56b795992c3be97b0af3089055f07c4786ab61c230f10786.map