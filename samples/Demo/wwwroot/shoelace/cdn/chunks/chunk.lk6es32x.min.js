/**
 * Minified by jsDelivr using Terser v5.37.0.
 * Original file: /npm/@shoelace-style/shoelace@2.19.1/cdn/chunks/chunk.LK6ES32X.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{range_styles_default}from"./chunk.23EVN5V7.js";import{defaultValue,l}from"./chunk.HDP2P5TV.js";import{form_control_styles_default}from"./chunk.VGK3WMAH.js";import{FormControlController}from"./chunk.E5624Z63.js";import{o}from"./chunk.ZTHCIXLL.js";import{HasSlotController}from"./chunk.NYIIDP5N.js";import{e}from"./chunk.3RBSSBZT.js";import{LocalizeController}from"./chunk.2SU6QBUU.js";import{watch}from"./chunk.JMZM2TDT.js";import{component_styles_default}from"./chunk.INZSKSLC.js";import{ShoelaceElement,e as e2,n,r,t}from"./chunk.I3G2R3VD.js";import{x}from"./chunk.OOP2EFQH.js";import{__decorateClass}from"./chunk.W27M6RDR.js";var SlRange=class extends ShoelaceElement{constructor(){super(...arguments),this.formControlController=new FormControlController(this),this.hasSlotController=new HasSlotController(this,"help-text","label"),this.localize=new LocalizeController(this),this.hasFocus=!1,this.hasTooltip=!1,this.title="",this.name="",this.value=0,this.label="",this.helpText="",this.disabled=!1,this.min=0,this.max=100,this.step=1,this.tooltip="top",this.tooltipFormatter=t=>t.toString(),this.form="",this.defaultValue=0}get validity(){return this.input.validity}get validationMessage(){return this.input.validationMessage}connectedCallback(){super.connectedCallback(),this.resizeObserver=new ResizeObserver((()=>this.syncRange())),this.value<this.min&&(this.value=this.min),this.value>this.max&&(this.value=this.max),this.updateComplete.then((()=>{this.syncRange(),this.resizeObserver.observe(this.input)}))}disconnectedCallback(){var t;super.disconnectedCallback(),null==(t=this.resizeObserver)||t.unobserve(this.input)}handleChange(){this.emit("sl-change")}handleInput(){this.value=parseFloat(this.input.value),this.emit("sl-input"),this.syncRange()}handleBlur(){this.hasFocus=!1,this.hasTooltip=!1,this.emit("sl-blur")}handleFocus(){this.hasFocus=!0,this.hasTooltip=!0,this.emit("sl-focus")}handleThumbDragStart(){this.hasTooltip=!0}handleThumbDragEnd(){this.hasTooltip=!1}syncProgress(t){this.input.style.setProperty("--percent",100*t+"%")}syncTooltip(t){if(null!==this.output){const e=this.input.offsetWidth,o=this.output.offsetWidth,s=getComputedStyle(this.input).getPropertyValue("--thumb-size"),l=e*t;if("rtl"===this.localize.dir()){const a=`${e-l}px + ${t} * ${s}`;this.output.style.translate=`calc((${a} - ${o/2}px - ${s} / 2))`}else{const e=`${l}px - ${t} * ${s}`;this.output.style.translate=`calc(${e} - ${o/2}px + ${s} / 2)`}}}handleValueChange(){this.formControlController.updateValidity(),this.input.value=this.value.toString(),this.value=parseFloat(this.input.value),this.syncRange()}handleDisabledChange(){this.formControlController.setValidity(this.disabled)}syncRange(){const t=Math.max(0,(this.value-this.min)/(this.max-this.min));this.syncProgress(t),"none"!==this.tooltip&&this.hasTooltip&&this.updateComplete.then((()=>this.syncTooltip(t)))}handleInvalid(t){this.formControlController.setValidity(!1),this.formControlController.emitInvalidEvent(t)}focus(t){this.input.focus(t)}blur(){this.input.blur()}stepUp(){this.input.stepUp(),this.value!==Number(this.input.value)&&(this.value=Number(this.input.value))}stepDown(){this.input.stepDown(),this.value!==Number(this.input.value)&&(this.value=Number(this.input.value))}checkValidity(){return this.input.checkValidity()}getForm(){return this.formControlController.getForm()}reportValidity(){return this.input.reportValidity()}setCustomValidity(t){this.input.setCustomValidity(t),this.formControlController.updateValidity()}render(){const t=this.hasSlotController.test("label"),s=this.hasSlotController.test("help-text"),a=!!this.label||!!t,i=!!this.helpText||!!s;return x`
      <div
        part="form-control"
        class=${e({"form-control":!0,"form-control--medium":!0,"form-control--has-label":a,"form-control--has-help-text":i})}
      >
        <label
          part="form-control-label"
          class="form-control__label"
          for="input"
          aria-hidden=${a?"false":"true"}
        >
          <slot name="label">${this.label}</slot>
        </label>

        <div part="form-control-input" class="form-control-input">
          <div
            part="base"
            class=${e({range:!0,"range--disabled":this.disabled,"range--focused":this.hasFocus,"range--rtl":"rtl"===this.localize.dir(),"range--tooltip-visible":this.hasTooltip,"range--tooltip-top":"top"===this.tooltip,"range--tooltip-bottom":"bottom"===this.tooltip})}
            @mousedown=${this.handleThumbDragStart}
            @mouseup=${this.handleThumbDragEnd}
            @touchstart=${this.handleThumbDragStart}
            @touchend=${this.handleThumbDragEnd}
          >
            <input
              part="input"
              id="input"
              class="range__control"
              title=${this.title}
              type="range"
              name=${o(this.name)}
              ?disabled=${this.disabled}
              min=${o(this.min)}
              max=${o(this.max)}
              step=${o(this.step)}
              .value=${l(this.value.toString())}
              aria-describedby="help-text"
              @change=${this.handleChange}
              @focus=${this.handleFocus}
              @input=${this.handleInput}
              @invalid=${this.handleInvalid}
              @blur=${this.handleBlur}
            />
            ${"none"===this.tooltip||this.disabled?"":x`
                  <output part="tooltip" class="range__tooltip">
                    ${"function"==typeof this.tooltipFormatter?this.tooltipFormatter(this.value):this.value}
                  </output>
                `}
          </div>
        </div>

        <div
          part="form-control-help-text"
          id="help-text"
          class="form-control__help-text"
          aria-hidden=${i?"false":"true"}
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `}};SlRange.styles=[component_styles_default,form_control_styles_default,range_styles_default],__decorateClass([e2(".range__control")],SlRange.prototype,"input",2),__decorateClass([e2(".range__tooltip")],SlRange.prototype,"output",2),__decorateClass([r()],SlRange.prototype,"hasFocus",2),__decorateClass([r()],SlRange.prototype,"hasTooltip",2),__decorateClass([n()],SlRange.prototype,"title",2),__decorateClass([n()],SlRange.prototype,"name",2),__decorateClass([n({type:Number})],SlRange.prototype,"value",2),__decorateClass([n()],SlRange.prototype,"label",2),__decorateClass([n({attribute:"help-text"})],SlRange.prototype,"helpText",2),__decorateClass([n({type:Boolean,reflect:!0})],SlRange.prototype,"disabled",2),__decorateClass([n({type:Number})],SlRange.prototype,"min",2),__decorateClass([n({type:Number})],SlRange.prototype,"max",2),__decorateClass([n({type:Number})],SlRange.prototype,"step",2),__decorateClass([n()],SlRange.prototype,"tooltip",2),__decorateClass([n({attribute:!1})],SlRange.prototype,"tooltipFormatter",2),__decorateClass([n({reflect:!0})],SlRange.prototype,"form",2),__decorateClass([defaultValue()],SlRange.prototype,"defaultValue",2),__decorateClass([t({passive:!0})],SlRange.prototype,"handleThumbDragStart",1),__decorateClass([watch("value",{waitUntilFirstUpdate:!0})],SlRange.prototype,"handleValueChange",1),__decorateClass([watch("disabled",{waitUntilFirstUpdate:!0})],SlRange.prototype,"handleDisabledChange",1),__decorateClass([watch("hasTooltip",{waitUntilFirstUpdate:!0})],SlRange.prototype,"syncRange",1);export{SlRange};
//# sourceMappingURL=/sm/370606cc31bc3792f3b2e55a5509352390521d363faef20f6b49ed57253d52da.map