/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/@shoelace-style/shoelace@2.17.1/cdn/chunks/chunk.7ZOJGPGY.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{switch_styles_default}from"./chunk.ROHOK2AY.js";import{l}from"./chunk.MB643KRE.js";import{defaultValue}from"./chunk.RQ7JZ4R7.js";import{form_control_styles_default}from"./chunk.2VV6AF6A.js";import{FormControlController}from"./chunk.37HAGFEA.js";import{o}from"./chunk.2URMUHDY.js";import{HasSlotController}from"./chunk.NYIIDP5N.js";import{e}from"./chunk.UZVKBFXH.js";import{watch}from"./chunk.SJGTYGCD.js";import{component_styles_default}from"./chunk.K23QWHWK.js";import{ShoelaceElement,e as e2,n,r}from"./chunk.UQRBALDC.js";import{x}from"./chunk.CXZZ2LVK.js";import{__decorateClass}from"./chunk.625AWUY7.js";var SlSwitch=class extends ShoelaceElement{constructor(){super(...arguments),this.formControlController=new FormControlController(this,{value:t=>t.checked?t.value||"on":void 0,defaultValue:t=>t.defaultChecked,setValue:(t,e)=>t.checked=e}),this.hasSlotController=new HasSlotController(this,"help-text"),this.hasFocus=!1,this.title="",this.name="",this.size="medium",this.disabled=!1,this.checked=!1,this.defaultChecked=!1,this.form="",this.required=!1,this.helpText=""}get validity(){return this.input.validity}get validationMessage(){return this.input.validationMessage}firstUpdated(){this.formControlController.updateValidity()}handleBlur(){this.hasFocus=!1,this.emit("sl-blur")}handleInput(){this.emit("sl-input")}handleInvalid(t){this.formControlController.setValidity(!1),this.formControlController.emitInvalidEvent(t)}handleClick(){this.checked=!this.checked,this.emit("sl-change")}handleFocus(){this.hasFocus=!0,this.emit("sl-focus")}handleKeyDown(t){"ArrowLeft"===t.key&&(t.preventDefault(),this.checked=!1,this.emit("sl-change"),this.emit("sl-input")),"ArrowRight"===t.key&&(t.preventDefault(),this.checked=!0,this.emit("sl-change"),this.emit("sl-input"))}handleCheckedChange(){this.input.checked=this.checked,this.formControlController.updateValidity()}handleDisabledChange(){this.formControlController.setValidity(!0)}click(){this.input.click()}focus(t){this.input.focus(t)}blur(){this.input.blur()}checkValidity(){return this.input.checkValidity()}getForm(){return this.formControlController.getForm()}reportValidity(){return this.input.reportValidity()}setCustomValidity(t){this.input.setCustomValidity(t),this.formControlController.updateValidity()}render(){const t=this.hasSlotController.test("help-text"),s=!!this.helpText||!!t;return x`
      <div
        class=${e({"form-control":!0,"form-control--small":"small"===this.size,"form-control--medium":"medium"===this.size,"form-control--large":"large"===this.size,"form-control--has-help-text":s})}
      >
        <label
          part="base"
          class=${e({switch:!0,"switch--checked":this.checked,"switch--disabled":this.disabled,"switch--focused":this.hasFocus,"switch--small":"small"===this.size,"switch--medium":"medium"===this.size,"switch--large":"large"===this.size})}
        >
          <input
            class="switch__input"
            type="checkbox"
            title=${this.title}
            name=${this.name}
            value=${o(this.value)}
            .checked=${l(this.checked)}
            .disabled=${this.disabled}
            .required=${this.required}
            role="switch"
            aria-checked=${this.checked?"true":"false"}
            aria-describedby="help-text"
            @click=${this.handleClick}
            @input=${this.handleInput}
            @invalid=${this.handleInvalid}
            @blur=${this.handleBlur}
            @focus=${this.handleFocus}
            @keydown=${this.handleKeyDown}
          />

          <span part="control" class="switch__control">
            <span part="thumb" class="switch__thumb"></span>
          </span>

          <div part="label" class="switch__label">
            <slot></slot>
          </div>
        </label>

        <div
          aria-hidden=${s?"false":"true"}
          class="form-control__help-text"
          id="help-text"
          part="form-control-help-text"
        >
          <slot name="help-text">${this.helpText}</slot>
        </div>
      </div>
    `}};SlSwitch.styles=[component_styles_default,form_control_styles_default,switch_styles_default],__decorateClass([e2('input[type="checkbox"]')],SlSwitch.prototype,"input",2),__decorateClass([r()],SlSwitch.prototype,"hasFocus",2),__decorateClass([n()],SlSwitch.prototype,"title",2),__decorateClass([n()],SlSwitch.prototype,"name",2),__decorateClass([n()],SlSwitch.prototype,"value",2),__decorateClass([n({reflect:!0})],SlSwitch.prototype,"size",2),__decorateClass([n({type:Boolean,reflect:!0})],SlSwitch.prototype,"disabled",2),__decorateClass([n({type:Boolean,reflect:!0})],SlSwitch.prototype,"checked",2),__decorateClass([defaultValue("checked")],SlSwitch.prototype,"defaultChecked",2),__decorateClass([n({reflect:!0})],SlSwitch.prototype,"form",2),__decorateClass([n({type:Boolean,reflect:!0})],SlSwitch.prototype,"required",2),__decorateClass([n({attribute:"help-text"})],SlSwitch.prototype,"helpText",2),__decorateClass([watch("checked",{waitUntilFirstUpdate:!0})],SlSwitch.prototype,"handleCheckedChange",1),__decorateClass([watch("disabled",{waitUntilFirstUpdate:!0})],SlSwitch.prototype,"handleDisabledChange",1);export{SlSwitch};
//# sourceMappingURL=/sm/aa365440a4217706159fb9f3502a30e48151c7921f5cc207e486d44031410243.map